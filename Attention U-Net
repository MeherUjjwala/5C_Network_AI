import tensorflow as tf
from tensorflow.keras import layers, models

def attention_block(x, g, inter_channel):
    theta_x = layers.Conv2D(inter_channel, (2, 2), strides=(2, 2), padding='same')(x)
    phi_g = layers.Conv2D(inter_channel, (1, 1), padding='same')(g)
    add_xg = layers.add([theta_x, phi_g])
    act_xg = layers.Activation('relu')(add_xg)
    psi = layers.Conv2D(1, (1, 1), padding='same')(act_xg)
    sigmoid_xg = layers.Activation('sigmoid')(psi)
    upsample_psi = layers.UpSampling2D(size=(2, 2))(sigmoid_xg)
    upsample_psi = layers.concatenate([upsample_psi, x], axis=3)
    return upsample_psi

def attention_unet(input_shape):
    inputs = layers.Input(input_shape)
    
    # Encoder
    conv1 = conv_block(inputs, 64)
    conv1 = conv_block(conv1, 64)
    pool1 = layers.MaxPooling2D(pool_size=(2, 2))(conv1)
    
    conv2 = conv_block(pool1, 128)
    conv2 = conv_block(conv2, 128)
    pool2 = layers.MaxPooling2D(pool_size=(2, 2))(conv2)
    
    conv3 = conv_block(pool2, 256)
    conv3 = conv_block(conv3, 256)
    pool3 = layers.MaxPooling2D(pool_size=(2, 2))(conv3)
    
    conv4 = conv_block(pool3, 512)
    conv4 = conv_block(conv4, 512)
    pool4 = layers.MaxPooling2D(pool_size=(2, 2))(conv4)
    
    conv5 = conv_block(pool4, 1024)
    conv5 = conv_block(conv5, 1024)
    
    # Decoder
    up6 = layers.UpSampling2D(size=(2, 2))(conv5)
    att6 = attention_block(conv4, up6, 512)
    up6 = layers.concatenate([up6, att6])
    conv6 = conv_block(up6, 512)
    conv6 = conv_block(conv6, 512)
    
    up7 = layers.UpSampling2D(size=(2, 2))(conv6)
    att7 = attention_block(conv3, up7, 256)
    up7 = layers.concatenate([up7, att7])
    conv7 = conv_block(up7, 256)
    conv7 = conv_block(conv7, 256)
    
    up8 = layers.UpSampling2D(size=(2, 2))(conv7)
    att8 = attention_block(conv2, up8, 128)
    up8 = layers.concatenate([up8, att8])
    conv8 = conv_block(up8, 128)
    conv8 = conv_block(conv8, 128)
    
    up9 = layers.UpSampling2D(size=(2, 2))(conv8)
    att9 = attention_block(conv1, up9, 64)
    up9 = layers.concatenate([up9, att9])
    conv9 = conv_block(up9, 64)
    conv9 = conv_block(conv9, 64)
    
    outputs = layers.Conv2D(1, (1, 1), activation='sigmoid')(conv9)
    
    model = models.Model(inputs=[inputs], outputs=[outputs])
    return model

# Example usage
input_shape = (256, 256, 1)
model = attention_unet(input_shape)
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()
